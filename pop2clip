#!/bin/env python
import pip
import sys

packages_required = ['pyperclip']

for p in packages_required:
    try:
        __import__(p)
    except ImportError:
        print('Installing %s' % p)
        pip.main(['install', p])

import pyperclip


supported_params = ['-l','-u','-c','-C','-s','-t','-h']
help_content =\
    "Supported parameters:\n" \
    " -l text to lowercase\n" \
    " -u text to uppercase\n" \
    " -c capitalize text\n" \
    " -C casefold text\n" \
    " -s swap case\n" \
    " -t tile\n" \
    " -h this help"

'''
# use stdin if it's full
if not sys.stdin.isatty():
    input_stream = sys.stdin

# otherwise, read the given filename
else:
    try:
        input_filename = sys.argv[1]
    except IndexError:
        message = 'need filename as first argument if stdin is not full'
        raise IndexError(message)
    else:
        input_stream = open(input_filename, 'rU')

for line in input_stream:
    print(line) # do something useful with each line
'''

def read_stdin():
    if not sys.stdin.isatty():
        text = sys.stdin
        return text

def process_arguments(arguments):

    if len(arguments) < 2:
        return (None, "")

    else:
        my_parm = arguments[1]
        if my_parm not in supported_params:
            text = arguments[1::]
            my_parm = None
        else:
            text = arguments[2::]
#        print(my_parm, text)
        return (my_parm, text)

def process_text(my_parm, text):
    try:
        text = ' '.join(map(str, text))
    except Exception as ex:
        print(ex)

    text_mapping = {'-u': text.upper(),
                    '-l': text.lower(),
                    '-c': text.capitalize(),
                    '-s': text.swapcase(),
                    '-t': text.title(),
                    None: text
                    }
    try:
        pyperclip.copy(text_mapping.get(my_parm))
    except pyperclip.PyperclipException as err:
        print("Clipboard not available\n%s"%err)
    except OSError as err:
        print(err)
    print("\n%s\n"%text_mapping.get(my_parm))

    if my_parm == '-h':
        text = help_content
        print(text)


def main():

    my_parm, text = process_arguments(sys.argv)
    if len(text) < 1:
        text = read_stdin()

    if text:
        process_text(my_parm, text)
    else:
        print("No text processed")

if __name__ == '__main__':
    main()



